#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('imyoung:server');
var http = require('http');
var IO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var socketIO = IO(server);
// 房间用户名单
var roomInfo = {};
/**
 * Listen on provided port, on all network interfaces.
 */
var users = [];
Array.prototype.findUser = function (user) {
    return !!this.filter(function(item, index, arr) {
        return item.user_id == user.user_id
    }).length;
}
socketIO.on('connection', function (socket) {
    var roomID = 'excited_room';   // 设置房间ID
    socket.on('message', function (msg) {
        // const user = users.filter(_user => {
        //     return _user.user_id === msg.target;
        // })
        socketIO.to(roomID).emit('msg', msg);
        // socket.broadcast.emit('msg', msg);
    });
    socket.on('online', function(user){
        if (!roomInfo[roomID]) {
          roomInfo[roomID] = [];
        }
        if (!roomInfo[roomID].findUser(user)) {
            roomInfo[roomID].push(user);
        }
        socket.join(roomID);
        socketIO.to(roomID).emit('system', user, roomInfo);
        // socket.emit('system', user)
        console.log(roomInfo);
    });
});


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}